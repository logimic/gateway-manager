/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface OegwScenario {
  /**
   * Name of scenario.
   */
  name: string;
  /**
   * JS cernario code
   */
  scenario: string;
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface OegwScenarioList {
  /**
   * Array of oegwScenario scenarios
   */
  list?: {
    [k: string]: any;
  }[];
  /**
   * Name of active script...
   */
  activeScenario: string;
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ThingSpace {
  /**
   * Message type.
   */
  mType: "thingSpace";
  data: {
    binaryOutput: {
      /**
       * Name of binary output.
       */
      name: string;
      /**
       * Current state of the output [True/False]
       */
      output: boolean;
      props?: any;
      [k: string]: any;
    }[];
    faceRecognition: {
      name: "FaceRecognition";
      faces: {
        /**
         * Name of face recognition item..
         */
        label: number;
        /**
         * Probability that recognized item is male...
         */
        maleProb: number;
        /**
         * Age of recognized man...
         */
        age: number;
        /**
         * Confidence
         */
        confidence: number;
        location: {
          /**
           * x-coordinate
           */
          x: number;
          /**
           * y-coordinate
           */
          y: number;
          /**
           * z-coordinate
           */
          z: number;
          [k: string]: any;
        };
        headPose: {
          /**
           * ...
           */
          r: number;
          /**
           * ...
           */
          p: number;
          /**
           * ...
           */
          y: number;
          [k: string]: any;
        };
        [k: string]: any;
      }[];
      [k: string]: any;
    }[];
    thermometer: {
      /**
       * Name of thermometer.
       */
      name: string;
      /**
       * Value of thermometer.
       */
      temperature?: number;
      props?: any;
      [k: string]: any;
    }[];
    [k: string]: any;
  };
  [k: string]: any;
}
